一、缓存状态有：

以下三种为 未命中
1.MISS         响应在缓存中找不到，所以需要在原始服务器中取得。这个响应之后可能会被缓存起来。
2.BYPASS       响应来自原始服务器而不是缓存，因为请求匹配了一个 proxy_cache_bypass。
3.EXPIRED      缓存中的某一项过期了，来自原始服务器的响应包含最新的内容。这个响应之后可能会被缓存起来。

以下四种为 命中
4.STALE        内容陈旧是因为原始服务器不能正确响应。需要配置 proxy_cache_use_stale 。
5.UPDATING     内容过期了，因为相对于之前的请求，响应的入口（ entry ）已经更新，并且 proxy_cache_use_stale 的 updating 已被设置 。
6.REVALIDATED  proxy_cache_revalidate 命令被启用， NGINX 检测得知当前的缓存内容依然有效（ If-Modified-Since 或者 If-None-Match ）。
7.HIT          响应包含来自缓存的最新有效的内容。

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

点击数(pv)，传输量(tx)，回源次数(pv_m)，回源传输量(tx_m)
pv_m 与 tx_m 要设置成有符号数
暂未考虑 REVALIDATED 304回源的情况
只适用于一层或两层节点

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   
二、上层与边缘节点都要计费	 
 
	1、不计算in流量时 点击数与传输量的算法 

	  （1）边缘节点算法：  
		命中：
			pv = pv + 1
			tx = tx + TX
			pv_m = pv_m + 0
			tx_m = tx_m + 0	
		未命中：
			pv = pv + 1
			tx = tx + TX
			pv_m = pv_m + 1
			tx_m = tx_m + TX
	 
	  （2）上层节点算法(当访问IP属于我们的节点时按上层节点计算)：   
		 命中：（说明没有回用户源站）
			 pv = pv + 0  /* 已经在边缘节点计算过pv */
			 tx = tx + TX 
			 pv_m = pv_m - 1  /* 已经在边缘节点累加过 pv_m ; 可能出现负值 */
			 tx_m = tx_m - TX  /* 已经在边缘节点累加过 tx_m  ; 可能出现负值 */	 
		 未命中：
			 pv = pv + 0
			 tx = tx + TX
			 pv_m = pv_m + 0
			 tx_m = tx_m + 0


	2、需要计算in流量时 点击数与传输量的算法
	（1）边缘节点算法：
		命中：
			pv += 1
			tx += TX
			pv_m += 0
			tx_m += 0		
		未命中：
			pv += 1
			tx += TX
			tx += TX /* in流量 */
			pv_m += 1
			tx_m += TX
		 
	（2）上层节点算法(当客户IP属于边缘节点时按上层节点计算)：
		命中：
			pv_m = pv_m - 1;
			tx_m = tx_m - TX;
			pv = pv + 0;
			tx = tx + 0;
		未命中：
			pv_m = pv_m + 0;
			tx_m = tx_m + 0;
			pv = pv + 0;
			tx = tx + TX;
			
			

三、上层节点不计费，只计费边缘节点

	1、不计算in流量时 点击数与传输量的算法 
	
	（1）边缘节点算法：
		命中：
			pv = pv + 1
			tx = tx + TX
			pv_m = pv_m + 0
			tx_m = tx_m + 0	
		未命中：
			pv = pv + 1
			tx = tx + TX
			pv_m = pv_m + 1
			tx_m = tx_m + TX
			
	（2）上层节点算法(当客户IP属于边缘节点时按上层节点计算)：
		 命中：（说明没有回用户源站）
			 pv = pv + 0  /* 已经在边缘节点计算过pv */
			 tx = tx + 0  /*上层不计费*/
			 pv_m = pv_m - 1  /* 已经在边缘节点累加过 pv_m ; 可能出现负值 */
			 tx_m = tx_m - TX  /* 已经在边缘节点累加过 tx_m  ; 可能出现负值 */	 
		 未命中：
			 pv = pv + 0
			 tx = tx + 0 /*上层不计费*/
			 pv_m = pv_m + 0
			 tx_m = tx_m + 0
		 
	2、需要计算in流量时 点击数与传输量的算法
	
	（1）边缘节点算法：
		命中：
			pv += 1
			tx += TX
			pv_m += 0
			tx_m += 0
		未命中：
			pv += 1
			tx += TX
			tx += TX /* in流量 */
			pv_m += 1
			tx_m += TX
			
	（2）上层节点算法(当客户IP属于边缘节点时按上层节点计算)：
		命中：
			pv_m = pv_m - 1;
			tx_m = tx_m - TX;
			pv = pv + 0;
			tx = tx + 0; /*已存在于边缘节点的in流量*/
		未命中：
			pv_m = pv_m + 0;
			tx_m = tx_m + 0;
			pv = pv + 0;
			tx = tx + 0; /*上层不计费*/