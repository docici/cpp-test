/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: http.proto */

#ifndef PROTOBUF_C_http_2eproto__INCLUDED
#define PROTOBUF_C_http_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _HttpMsg HttpMsg;
typedef struct _HttpMsg__Header HttpMsg__Header;


/* --- enums --- */


/* --- messages --- */

struct  _HttpMsg__Header
{
  ProtobufCMessage base;
  /*
   * /< 名
   */
  char *header_name;
  /*
   * /< 值
   */
  protobuf_c_boolean has_header_value;
  ProtobufCBinaryData header_value;
};
#define HTTP_MSG__HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&http_msg__header__descriptor) \
    , NULL, 0,{0,NULL} }


struct  _HttpMsg
{
  ProtobufCMessage base;
  /*
   * /< http_parser_type 请求或响应
   */
  int32_t type;
  /*
   * /< http大版本号
   */
  int32_t http_major;
  /*
   * /< http小版本号
   */
  int32_t http_minor;
  /*
   * /< 内容长度
   */
  protobuf_c_boolean has_content_length;
  int32_t content_length;
  /*
   * /< 请求方法
   */
  protobuf_c_boolean has_method;
  int32_t method;
  /*
   * /< 响应状态码
   */
  protobuf_c_boolean has_status_code;
  int32_t status_code;
  /*
   * /< 传输编码（只在encode时使用，当 Transfer-Encoding: chunked 时，用于标识chunk序号，0表示第一个chunk，依次递增）
   */
  protobuf_c_boolean has_encoding;
  int32_t encoding;
  /*
   * /< 地址
   */
  char *url;
  /*
   * /< http头域
   */
  size_t n_headers;
  HttpMsg__Header **headers;
  /*
   * /< 消息体（当 Transfer-Encoding: chunked 时，只存储一个chunk）
   */
  protobuf_c_boolean has_body;
  ProtobufCBinaryData body;
  /*
   *	repeated Param get_params				= 11;		///< GET方法参数，POST方法不需要
   *	optional string host					= 12;		///< Http Decode时从url中解析出来，不需要人为填充（encode时不需要填）
   *	optional int32 port						= 13;		///< Http Decode时从url中解析出来，不需要人为填充（encode时不需要填）
   */
  /*
   * /< Http Decode时从url中解析出来，不需要人为填充（encode时不需要填）
   */
  char *path;
  /*
   * /< 是否正在解码（true 正在解码， false 未解码或已完成解码）
   */
  protobuf_c_boolean has_is_decoding;
  protobuf_c_boolean is_decoding;
};
#define HTTP_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&http_msg__descriptor) \
    , 0, 0, 0, 0,0, 0,0, 0,0, 0,0, NULL, 0,NULL, 0,{0,NULL}, NULL, 0,0 }


/* HttpMsg__Header methods */
void   http_msg__header__init
                     (HttpMsg__Header         *message);
/* HttpMsg methods */
void   http_msg__init
                     (HttpMsg         *message);
size_t http_msg__get_packed_size
                     (const HttpMsg   *message);
size_t http_msg__pack
                     (const HttpMsg   *message,
                      uint8_t             *out);
size_t http_msg__pack_to_buffer
                     (const HttpMsg   *message,
                      ProtobufCBuffer     *buffer);
HttpMsg *
       http_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   http_msg__free_unpacked
                     (HttpMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*HttpMsg__Header_Closure)
                 (const HttpMsg__Header *message,
                  void *closure_data);
typedef void (*HttpMsg_Closure)
                 (const HttpMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor http_msg__descriptor;
extern const ProtobufCMessageDescriptor http_msg__header__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_http_2eproto__INCLUDED */
